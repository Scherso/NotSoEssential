plugins {
    id "net.minecraftforge.gradle.forge" version "6f53277"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id 'org.spongepowered.mixin' version "d5f9873"
    id "java"
}

version = projectVersion
group = projectGroup
archivesBaseName = projectName

sourceCompatibility = targetCompatibility = 1.8
compileJava.options.encoding = "UTF-8"

minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    mappings = "stable_22"
    makeObfSourceJar = false
    // property references...
    replace('@NAME@', projectName)
    replace('@VER@': projectVersion)
    replace('@ID@', projectId)

    // JVM args...
    clientRunArgs += "--mixin mixins.${projectId}.json"
    clientRunArgs += '--tweakClass gg.essential.loader.stage0.EssentialSetupTweaker'
}

configurations {
    shade
    implementation.extendsFrom(shade)
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io/' }
    maven { url "https://repo.sk1er.club/repository/maven-public/" }
    maven { url 'https://repo.spongepowered.org/repository/maven-public/' }
}

dependencies {
    // essential...
    shade ("gg.essential:loader-launchwrapper:${essentialVersion}") {
        transitive = false
    }
    implementation 'gg.essential:essential-1.8.9-forge:1626+release-launch'

    // mixins...
    compileOnly(annotationProcessor("org.spongepowered:mixin:${spongePoweredMixinVersion}"))
    annotationProcessor("com.google.code.gson:gson:${gsonVersion}")
    annotationProcessor("com.google.guava:guava:${guavaVersion}")
    annotationProcessor("org.ow2.asm:asm-tree:${asmTreeVersion}")
}

processResources {
    inputs.property("version", version)
    inputs.property("mcversion", minecraft.version)

    filesMatching("mcmod.info") {
        expand(
                "id": projectId,
                "name": projectName,
                "version": version,
                "mcversion": minecraft.version
        )
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task moveResources {
    doLast {
        try {
            ant.move(
                    file: "${buildDir}/resources/main",
                    todir: "${buildDir}/classes/java"
            )
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

jar {
    manifest.attributes(
            'ModSide': 'CLIENT',
            'ForceLoadAsMod': true,
            'TweakClass': 'gg.essential.loader.stage0.EssentialSetupTweaker',
            'MixinConfigs': "mixins.${projectId}.json"
    )

    enabled = false
}

mixin {
    disableRefMapWarning = true
    defaultObfuscationEnv searge
    add sourceSets.main, "mixins.${projectId}.refmap.json"
}

shadowJar {
    configurations = [project.configurations.shade]
    duplicatesStrategy DuplicatesStrategy.EXCLUDE

    archiveClassifier.set("")
}

reobf {
    shadowJar {
        classpath = sourceSets.main.compileClasspath
    }
}

sourceSets {
    main {
        ext.refMap = "mixins.${projectId}.refmap.json"
    }
}

tasks.reobfJar.dependsOn tasks.shadowJar